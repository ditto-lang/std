module Array.Tests exports (
    tests,
);

import Array;
import Bool;
import Int;
import Maybe (
    Maybe(..),
);
import Never;
import Pair (
    Pair(..),
);
import String;
import Test (
    Test,
);


tests: Array(Test) = [
    Test.pure("Array: is empty", Test.assert(Array.is_empty([]))),
    Test.pure(
        "Array: is not empty",
        Test.assert(Bool.not(Array.is_empty([1]))),
    ),
    Test.pure(
        "Array: get",
        Test.assert(
            Array.get([1, 2, 3], 0)
            |> Maybe.is_eq(Just(1), Int.is_eq),
        ),
    ),
    Test.pure(
        "Array: get missing",
        Test.assert(
            Array.get([1, 2, 3], 100)
            |> Maybe.is_eq(Nothing, Int.is_eq),
        ),
    ),
    Test.pure(
        "Array: map",
        assert_is_eq(
            Array.map([1, 2, 3], fn (i) -> Int.add(i, 1)),
            [2, 3, 4],
            Int.is_eq,
        ),
    ),
    Test.pure(
        "Array: map empty",
        assert_is_eq(
            Array.map([], Never.never),
            [],
            --fn (_, _) -> true     FIXME
            -- fn (_, __) -> true   FIXME
            fn (nope, _) -> Never.never(nope),
        ),
    ),
    Test.pure(
        "Array: zip",
        assert_is_eq(
            Array.zip([1, 2, 3], ["1", "2", "3"]),
            [Pair(1, "1"), Pair(2, "2"), Pair(3, "3")],
            fn (Pair(i, s), Pair(j, ss)) -> Bool.and(
                Int.is_eq(i, j),
                String.is_eq(s, ss),
            ),
        ),
    ),
    Test.pure(
        "Array: zip empty",
        Test.assert(
            Array.zip([1, 2, 3], [])
            |> Array.is_empty,
        ),
    ),
    Test.pure(
        "Array: sort",
        assert_is_eq(
            Array.sort([4, 10, 2, 1], Int.compare),
            [1, 2, 4, 10],
            Int.is_eq,
        ),
    ),
    Test.pure(
        "Array: sort empty",
        Test.assert(
            Array.sort([], Int.compare)
            |> Array.is_empty,
        ),
    ),
    Test.pure(
        "Array: push_start",
        assert_is_eq(Array.push_start([1], 0), [0, 1], Int.is_eq),
    ),
    Test.pure(
        "Array: push_end",
        assert_is_eq(Array.push_end([0], 1), [0, 1], Int.is_eq),
    ),
    Test.pure(
        "Array: concat",
        assert_is_eq(
            Array.concat([[1, 2, 3], [4, 5, 6]]),
            [1, 2, 3, 4, 5, 6],
            Int.is_eq,
        ),
    ),
    Test.pure(
        "Array: concat empty",
        Test.assert(Array.is_empty(Array.concat([]))),
    ),
    Test.pure(
        "Array: foldr",
        assert_is_eq(
            Array.foldr([1, 2, 3], [], fn (i, acc) -> Array.push_end(acc, i)),
            [3, 2, 1],
            Int.is_eq,
        ),
    ),
    Test.pure(
        "Array: filter",
        assert_is_eq(
            Array.filter(
                [1, 2, 3, 4, 5],
                fn (x) ->
                    if is_even(x) then Just(x) else Nothing,
            ),
            [2, 4],
            Int.is_eq,
        ),
    ),
];

is_even = fn (x: Int): Bool ->
    x
    |> Int.remainder(2)
    |> Int.is_eq(0);

assert_is_eq = fn (
    xs: Array(a),
    ys: Array(b),
    eq: (a, b) -> Bool,
): Test.Result -> Test.assert(array_is_eq(xs, ys, eq));

array_is_eq = fn (xs: Array(a), ys: Array(b), eq: (a, b) -> Bool): Bool ->
    Bool.and(
        Int.is_eq(Array.length(xs), Array.length(ys)),
        Array.zip(xs, ys)
        |> Array.foldl(true, fn (acc, Pair(x, y)) -> Bool.and(acc, eq(x, y))),
    );
