module List.Tests exports (
    tests,
)

import Bool
import Int
import List (
    List(..),
)
import Pair (
    Pair(..),
)
import Test (
    Test,
)


tests: Array(Test) = [
    Test.pure(
        "List: reverse",
        assert_is_eq(
            Cons(1, Cons(2, Cons(3, Nil)))
            |> List.reverse,
            Cons(3, Cons(2, Cons(1, Nil))),
            Int.is_eq,
        ),
    ),
    Test.pure(
        "List: empty length",
        Test.assert(
            List.length(Nil)
            |> Int.is_eq(0),
        ),
    ),
    Test.pure(
        "List: length",
        Test.assert(
            List.length(Cons(1, Cons(2, Nil)))
            |> Int.is_eq(2),
        ),
    ),
    Test.pure(
        "List: map",
        assert_is_eq(
            Cons(1, Cons(2, Nil))
            |> List.map(fn (i) -> Int.add(i, 10)),
            Cons(11, Cons(12, Nil)),
            Int.is_eq,
        ),
    ),
]

assert_is_eq = fn (xs: List(a), ys: List(b), eq: (a, b) -> Bool): Test.Result ->
    Test.assert(list_is_eq(xs, ys, eq))

list_is_eq = fn (xs: List(a), ys: List(b), eq: (a, b) -> Bool): Bool ->
    Bool.and(
        Int.is_eq(List.length(xs), List.length(ys)),
        List.zip(xs, ys)
        |> List.foldl(true, fn (acc, Pair(x, y)) -> Bool.and(acc, eq(x, y))),
    )
