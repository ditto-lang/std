module Array exports (
    from,
    zip,
    get,
    zip_with,
    map,
    map_with_index,
    filter,
    foldl,
    foldr,
    sort,
    push_start,
    push_end,
    length,
    is_empty,
    concat,
);

import Int;
import Maybe (
    Maybe(..),
);
import Ordering (
    Ordering(..),
);
import Pair (
    Pair(..),
);


from = from_impl;

get = fn (array: Array(a), i: Int): Maybe(a) -> get_impl(
    array,
    i,
    Just,
    Nothing,
);

zip = fn (xs: Array(a), ys: Array(b)): Array(Pair(a, b)) -> zip_with(
    xs,
    ys,
    Pair,
);

zip_with = fn (xs: Array(a), ys: Array(b), f: (a, b) -> c): Array(c) ->
    if
        length(ys)
        |> Int.is_greater_than(length(xs))
    then
        foldl(
            map_with_index(xs, Pair),
            [],
            fn (acc, Pair(i, a)) ->
                match get(ys, i) with
                | Just(b) -> push_end(acc, f(a, b))
                | Nothing -> acc
                end,
        )
    else
        foldl(
            map_with_index(ys, Pair),
            [],
            fn (acc, Pair(i, b)) ->
                match get(xs, i) with
                | Just(a) -> push_end(acc, f(a, b))
                | Nothing -> acc
                end,
        );

map = fn (array: Array(a), f: (a) -> b): Array(b) -> map_with_index(
    array,
    fn (_i, a) -> f(a),
);

map_with_index = map_with_index_impl;

sort = fn (array: Array(a), compare: (a, a) -> Ordering): Array(a) -> sort_impl(
    array,
    fn (lhs, rhs) -> ordering_to_int(compare(lhs, rhs)),
);

-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
ordering_to_int = fn (ordering) ->
    match ordering with
    | GT -> 1
    | EQ -> 0
    | LT -> Int.negate(1)
    end;

foldl = foldl_impl;

foldr = foldr_impl;

filter = fn (array: Array(a), f: (a) -> Maybe(b)): Array(b) ->
    array
    |> map(fn (a) -> maybe_to_array(f(a)))
    |> concat;

maybe_to_array = fn (mb: Maybe(a)): Array(a) ->
    match mb with
    | Just(a) -> [a]
    | Nothing -> []
    end;

push_start = push_start_impl;

push_end = push_end_impl;

length = length_impl;

is_empty = fn (array: Array(a)): Bool ->
    length(array)
    |> Int.is_eq(0);

concat = concat_impl;

foreign from_impl: (Int, (Int) -> a) -> Array(a);

foreign get_impl: (Array(a), Int, (a) -> Maybe(a), Maybe(a)) -> Maybe(a);

foreign map_with_index_impl: (Array(a), (Int, a) -> b) -> Array(b);

foreign sort_impl: (Array(a), (a, a) -> Int) -> Array(a);

foreign foldl_impl: (Array(a), b, (b, a) -> b) -> b;

foreign foldr_impl: (Array(a), b, (a, b) -> b) -> b;

foreign push_start_impl: (Array(a), a) -> Array(a);

foreign push_end_impl: (Array(a), a) -> Array(a);

foreign length_impl: (Array(a)) -> Int;

foreign concat_impl: (Array(Array(a))) -> Array(a);
