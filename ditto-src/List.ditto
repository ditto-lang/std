module List exports (
    List(..),
    map,
    reverse,
    length,
    foldl,
    zip,
    zip_with,
);

import Int;
import Pair (
    Pair(..),
);


type List(a) =
    | Cons(a, List(a))
    | Nil;

reverse = fn (list: List(a)): List(a) -> reverse_aux(list, Nil);

reverse_aux = fn (list: List(a), acc: List(a)): List(a) ->
    match list with
    | Cons(a, rest) -> reverse_aux(rest, Cons(a, acc))
    | Nil -> acc
    end;

map = fn (list: List(a), f: (a) -> b): List(b) -> map_aux(list, f, Nil);

map_aux = fn (list: List(a), f: (a) -> b, acc: List(b)): List(b) ->
    match list with
    | Cons(a, rest) -> map_aux(rest, f, Cons(f(a), acc))
    | Nil -> reverse(acc)
    end;

length = fn (list: List(a)): Int -> length_aux(list, 0);

length_aux = fn (list: List(a), n: Int): Int ->
    match list with
    | Cons(_, rest) -> length_aux(rest, Int.add(n, 1))
    | Nil -> n
    end;

foldl = fn (list: List(a), acc: b, f: (b, a) -> b): b ->
    match list with
    -- | Cons(a, rest) -> foldl() FIXME
    | Cons(a, rest) -> foldl(rest, f(acc, a), f)
    | Nil -> acc
    end;

zip = fn (xs: List(a), ys: List(b)): List(Pair(a, b)) -> zip_with(xs, ys, Pair);

zip_with = fn (xs: List(a), ys: List(b), f: (a, b) -> c): List(c) ->
    zip_with_aux(xs, ys, f, Nil);

zip_with_aux = fn (
    xs: List(a),
    ys: List(b),
    f: (a, b) -> c,
    acc: List(c),
): List(c) ->
    match xs with
    | Cons(a, rest_a) ->
        match ys with
        | Cons(b, rest_b) -> zip_with_aux(rest_a, rest_b, f, Cons(f(a, b), acc))
        | Nil -> reverse(acc)
        end
    | Nil -> reverse(acc)
    end;
