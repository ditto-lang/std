module Result exports (
    Result(..),
    map,
    map_err,
    apply,
    and_then,
    infallible,
);

import Never (
    Never,
    never,
);


type Result(a, e) =
    | Ok(a)
    | Err(e);

map = fn (result: Result(a, e), f: (a) -> b): Result(b, e) ->
    match result with
    | Ok(a) -> Ok(f(a))
    | Err(err) -> Err(err)
    end;

map_err = fn (result: Result(a, e), f: (e) -> x): Result(a, x) ->
    match result with
    | Ok(a) -> Ok(a)
    | Err(err) -> Err(f(err))
    end;

apply = fn (result_fn: Result((a) -> b, e), result_a: Result(a, e)): Result(
    b,
    e,
) ->
    match result_fn with
    | Ok(f) ->
        match result_a with
        | Ok(a) -> Ok(f(a))
        | Err(e) -> Err(e)
        end
    | Err(e) -> Err(e)
    end;

and_then = fn (result: Result(a, e), f: (a) -> Result(b, e)): Result(b, e) ->
    match result with
    | Ok(a) -> f(a)
    | Err(err) -> Err(err)
    end;

infallible = fn (result: Result(a, Never)): Result(a, e) ->
    match result with
    | Ok(a) -> Ok(a)
    | Err(nah) -> never(nah)
    end;
